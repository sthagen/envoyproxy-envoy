date: Pending

behavior_changes:
# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*
- area: listener
  change: |
    Previously a listener update with different :ref:`transparent <envoy_v3_api_field_config.listener.v3.Listener.transparent>`, :ref:`freebind <envoy_v3_api_field_config.listener.v3.Listener.freebind>`,
    :ref:`tcp_fast_open_queue_length <envoy_v3_api_field_config.listener.v3.Listener.tcp_fast_open_queue_length>` or :ref:`socket_options <envoy_v3_api_field_config.listener.v3.Listener.socket_options>` was ignored.
    Now, when those fields are updated, a new socket will be created for
    the listener and the new value of those fields applied to it. This only happens when :ref:`enable_reuse_port <envoy_v3_api_field_config.listener.v3.Listener.enable_reuse_port>` is true.
    Otherwise if those fields change the update is rejected.
    New runtime flag ``envoy.reloadable_features.enable_update_listener_socket_options`` can be used for revert this behavior.
- area: build
  change: |
    removed the cares and apple resolvers as required extensions. Envoy now only creates DNS resolvers when necessary (e.g. for logical DNS cluster) so does not require cares to always be included. If your Envoys do DNS resolution and you override extensions_build_config you will need to include cares explicitly.
- area: listener
  change: |
    Previously a listener update with different :ref:`enable_reuse_port <envoy_v3_api_field_config.listener.v3.Listener.enable_reuse_port>` value will be ignored. Now,
    this kind of update will be rejected. The runtime flag ``envoy.reloadable_features.enable_update_listener_socket_options`` can be used for revert this behavior.
- area: build
  change: |
    moved the strict_dns, original_dst, logical_dns, static, and eds clusters to extensions. If you use these clusters and override extensions_build_config.bzl you will now need to include it explicitly.
- area: loadbalancing
  change: |
    When active HC is enabled per cluster, slow start calculation now starts after first passing HC. Cluster membership duration condition is dropped from slow start calculation.
    Endpoint can now re-enter slow start if active HC is configured per cluster, on each "unhealthy -> healthy" state transition.

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*
- area: tls
  change: |
    added support for intermediate CA as trusted ca. The peer certificate issued by an intermediate CA will be trusted by
    building valid partial chain. In old days, it can not be verified without trusting its ancestor root CA and building
    a full chain.
    :ref:`trust_ca<envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.trusted_ca>`.
    This change can be reverted via the ``envoy.reloadable_features.enable_intermediate_ca``.

- area: cache_filter
  change: |
    add a completion callback to updateHeaders interface. Any external cache implementations will need to update to match this new interface. See changes to simple_http_cache in PR#23666 for example.
- area: cache_filter
  change: |
    api path of work-in-progress extension changed from ``api/extensions/cache/simple_http_cache`` to ``api/extensions/http/cache/simple_http_cache``, and source code moved, to match extension category.
- area: http filters
  change: |
    change ``StreamEncoderFilter::encode1xxHeaders`` to use its own enum class ``Http::Filter1xxHeadersStatus``. Previously we shared the same enum class for general headers, but the implementation did not support most of them.
- area: oauth2
  change: |
    Requests which match the passthrough header now have their own metric ``oauth_passthrough`` and aren't included in ``oauth_success`` anymore.
- area: upstream
  change: |
    detailed health status is used for override host selection. This behavior can be reverted by setting runtime flag ``envoy.reloadable_features.validate_detailed_override_host_statuses`` to false.
- area: rate_limit
  change: |
    add ``MONTH`` and ``YEAR`` to the unit of time for rate limit.
- area: router
  change: |
    Virtual cluster statistics are no longer created for routes without any ``virtual_clusters``. Previously statistics for a ``catch all`` virtual cluster were created, but never updated.
- area: jwt_authn
  change: |
    adjust the refetch time for remote_jwks async_fetch feature. For a good fetch, refetch 5 seconds before jwks cache duration. For a failed fetch, refetch time can be specified by :ref:`failed_refetch_duration <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.failed_refetch_duration>` with default 1 second.

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*
- area: aws_lambda
  change: |
    fix a bug when :ref:`PerRouteConfig <envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.PerRouteConfig>` is defined and was routing to a target cluster's AWS Lambda endpoint
    in a region that is different from the region obtained in :ref:`arn <envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.arn>` of aws_lambda http_filter configuration
    then the authorization header included in the request towards AWS Lambda was not signed with the region specified in PerRouteConfig.
- area: grpc_json_transcoder
  change: |
    fix a bug when using http2, request body has google.api.HttpBody and the size is < 16KB, it will cause EOF from the backend grpc server.
- area: router
  change: |
    fixed a bug that incorrectly rewrote the path when using ``regex_rewrite`` for redirects matched on prefix.
- area: oauth2
  change: |
    fixed a bug when passthrough header was matched, envoy would always remove the authorization header. This behavioral change can be temporarily reverted by setting runtime guard ``envoy.reloadable_features.oauth_header_passthrough_fix`` to false.
- area: generic_proxy
  change: |
    fixed a bug that encoder filters and decoder filters of generic proxy will be executed in the same order. The encoder filters' execuate order should be the reverse of decoder filters' in the generic proxy.
- area: quic
  change: |
    reject configs that specify require_client_certificate with QUIC since clients certificates are currently unsupported in QUIC. This behavioral change can be temporarily reverted by setting runtime guard ``envoy.reloadable_features.reject_require_client_certificate_with_quic`` to false.
- area: http
  change: |
    fixed a bug where Utility::PercentEncoding::encode() encodes some characters incorrectly because it was treating the value as negative.
- area: upstream
  change: |
    fixed a bug that only coarse health status is used for override host selection.
- area: validation
  change: |
    fixed a crash which could happen when optional ``engine_type`` is not provided in regex.
- area: upstream
  change: |
    fixed a bug when specify both a single address in bootstrap and cluster upstream binding config but with a different IP version. It should be allowed but it is rejected.
- area: jwt_authn
  change: |
    fix a bug that jwt_cache breaks the :ref:`provider_and_audiences <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.provider_and_audiences>` JWT requirement.

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`
- area: eds
  change: |
    removed ``envoy.reloadable_features.support_locality_update_on_eds_cluster_endpoints`` and legacy code paths.
- area: listener
  change: |
    removed ``envoy.reloadable_features.strict_check_on_ipv4_compat`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.deprecate_global_ints`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.allow_adding_content_type_in_local_replies`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.allow_upstream_inline_write`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.append_or_truncate`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.use_new_codec_wrapper`` and legacy code paths.
    removed ``envoy.reloadable_features.append_to_accept_content_encoding_only_once`` and legacy code paths.
    removed ``envoy.reloadable_features.http1_lazy_read_disable`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.http_100_continue_case_insensitive`` and legacy code paths.
    removed ``envoy.reloadable_features.override_request_timeout_by_gateway_timeout`` and legacy code paths.
- area: ecds
  change: |
    removed ``envoy.reloadable_features.top_level_ecds_stats`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.skip_delay_close`` and legacy code paths.
- area: router
  change: |
    removed ``envoy.reloadable_features.do_not_await_headers_on_upstream_timeout_to_emit_stats`` and legacy code paths.

new_features:
- area: tls
  change: |
    added support for SNI-based cert selection in tls downstream transport socket. Detailed documentation is available :ref:`cert selection<arch_overview_ssl_cert_select>`.
    New config option :ref:`full_scan_certs_on_sni_mismatch <envoy_v3_api_field_extensions.transport_sockets.tls.v3.DownstreamTlsContext.full_scan_certs_on_sni_mismatch>`
    is introduced to disable or enable full scan when no cert matches to SNI, defaults to false.
    New runtime flag ``envoy.reloadable_features.no_full_scan_certs_on_sni_mismatch`` can be used for override the default value.
- area: build
  change: |
    added an option ``--define=library_autolink=disabled`` to disable autolinking libraries.
- area: generic_proxy
  change: |
    added :ref:`dubbo codec support <envoy_v3_api_msg_extensions.filters.network.generic_proxy.codecs.dubbo.v3.DubboCodecConfig>` to the
    :ref:`generic_proxy filter <envoy_v3_api_msg_extensions.filters.network.generic_proxy.v3.GenericProxy>`.
- area: upstream
  change: |
    added a new field :ref:`socket_options <envoy_v3_api_field_config.core.v3.ExtraSourceAddress.socket_options>` to the ExtraSourceAddress, allowing specifying discrete socket options for each source address.
- area: access_log
  change: |
    added a new field :ref:`intermediate_log_entry <envoy_v3_api_field_data.accesslog.v3.AccessLogCommon.intermediate_log_entry>` to detect if the gRPC log entry is an intermediate log entry or not and added
    support to flush TCP log entries periodly according to the configured :ref:`inteval <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.access_log_flush_interval>`.
- area: access_log
  change: |
    added support for :ref:`%STREAM_ID% <config_access_log_format_stream_id>` for stream unique identifier.
- area: thrift
  change: |
    added payload to metadata filter which matches a given payload field's value would be extracted and attached to the request as dynamic metadata.
- area: http
  change: |
    allowing the dynamic forward proxy cluster to :ref:`allow_coalesced_connections <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.allow_coalesced_connections>`  for HTTP/2 and HTTP/3 connections.
- area: generic_proxy
  change: |
    added :ref:`generic rds support <envoy_v3_api_field_extensions.filters.network.generic_proxy.v3.GenericProxy.generic_rds>`.
- area: listener
  change: |
    added a new field :ref:`socket_options <envoy_v3_api_field_config.listener.v3.AdditionalAddress.socket_options>` to the AdditionalAddress, allowing specifying discrete socket options for each listen address.
- area: listener
  change: |
    added ``continueFilterChain()`` and ``dispatcher()`` methods to the ``ListenerFilterCallback``. This allows listener filters to continue listener filter iteration after stopping iteration e.g. if the listener filter depends on an async process.
- area: thrift_proxy
  change: |
    added ``envoy.reloadable_features.thrift_allow_negative_field_ids`` to support negative field ids for legacy thrift service.
- area: udp_proxy
  change: |
    added support for :ref:`proxy_access_log <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.proxy_access_log>`.
- area: tcp_proxy
  change: |
    added new config :ref:`post_path field <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.post_path>` to specifiy a custom path for HTTP tunneling with POST method.
- area: health_check
  change: |
    added an optional bool flag :ref:`disable_active_health_check <envoy_v3_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.disable_active_health_check>` to disable the active health check for the endpoint.
- area: mobile
  change: |
    started merging the Envoy mobile library into the main Envoy repo.
- area: matching
  change: |
    support filter chain selection based on the dynamic metadata and the filter state using :ref:`formatter actions <extension_envoy.matching.actions.format_string>`.
- area: redis
  change: |
    extended :ref:`cluster support <arch_overview_redis_cluster_support>` by adding a :ref:`dns_cache_config <envoy_v3_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.dns_cache_config>` option that can be used to resolve hostnames returned by MOVED/ASK responses.
- area: gcp_authn
  change: |
    added support for configuring header that holds token fetched from GCE metadata server in new field :ref:`token_header <envoy_v3_api_field_extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig.token_header>`.
- area: tracing
  change: |
    added support for setting the hostname used when sending spans to a Datadog collector using the :ref:`collector_hostname <envoy_v3_api_field_config.trace.v3.DatadogConfig.collector_hostname>` field.
- area: jwt_authn
  change: |
    added support for copying jwt claims to http headers.
- area: generic_proxy
  change: |
    added drain support to generic proxy to doing graceful closes on connections when possible.
- area: http
  change: |
    added :ref:`append_x_forwarded_port <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.append_x_forwarded_port>` to append the ``x-forwarded-port`` header to HTTP upstream requests.
- area: ext_authz
  change: |
    added support to allowlist headers included in the check request to gRPC authorization server (previously only available for HTTP authorization server).
    Pre-existing field :ref:`allowed_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.allowed_headers>` is deprecated in favour
    of the new field :ref:`allowed_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.allowed_headers>`.
- area: router
  change: |
    added :ref:`RouteList <envoy_v3_api_msg_config.route.v3.RouteList>` to support route list in :ref:`VirtualHost.matcher <envoy_v3_api_field_config.route.v3.VirtualHost.matcher>`.
- area: upstream
  change: |
    allow configuring :ref:`cluster bind config <envoy_v3_api_field_config.cluster.v3.Cluster.upstream_bind_config>` and
    :ref:`cluster manager bind config <envoy_v3_api_field_config.bootstrap.v3.ClusterManager.upstream_bind_config>` without specifying a
    :ref:`source_address <envoy_v3_api_field_config.core.v3.BindConfig.source_address>`. This allows setting
    :ref:`socket options <envoy_v3_api_field_config.core.v3.BindConfig.socket_options>` when using the default unspecified bind address
    is desired.

deprecated:
